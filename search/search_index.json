{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RepoAuditor","text":"<p><code>RepoAuditor</code> is a handy tool which audits repositories for best practices.</p> <p>It helps maintain high-quality and consistent open-source repositories even if you are new to maintaining open-source software.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Installation</li> <li>How to use RepoAuditor</li> <li>Personal Access Token</li> <li>Example Usage</li> <li>Config File</li> <li>Development</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>We recommend using uv since it can install <code>RepoAuditor</code> as a tool via <code>uvx</code> into a sandbox environment for quick use. This lets you directly run <code>RepoAuditor</code>.</p> <pre><code>uvx RepoAuditor\n</code></pre> <p>Alternatively, you can install <code>RepoAuditor</code> via <code>uv</code> or <code>pip</code>. <code>uv</code> is preferred to <code>pip</code> since it creates and manages a virtual environment.</p> Installation Method Command Via uv <code>uv add repoauditor</code> Via pip <code>pip install repoauditor</code>"},{"location":"#how-to-use","title":"How To Use","text":"<p>Once installed, you can invoke the following to verify if <code>RepoAuditor</code> is installed correctly:</p> <pre><code>uvx RepoAuditor --version\n</code></pre> <p>and you should see something like</p> <pre><code>RepoAuditor vX.X.X\n</code></pre> <p>To get a list of command line options, you can run</p> <pre><code>uvx RepoAuditor --help\n</code></pre> <p>In order to use <code>RepoAuditor</code> with GitHub, you will need a Personal Access Token (or PAT for short).</p> <p>Let's go over how to generate a PAT next.</p>"},{"location":"CONTRIBUTING/","title":"Contribution Guidelines","text":"<p>Additional information is available at the following locations.</p> Topic Description Location Code of Conduct How we welcome others to this community. CODE_OF_CONDUCT.md Development Activities How we create software in this community. DEVELOPMENT.md Security How to report vulnerabilities in our software. SECURITY.md"},{"location":"CONTRIBUTING/#bug-reports","title":"Bug Reports","text":"<p>If you experience a problem with our software, please visit issues and create a <code>Bug report</code>.</p>"},{"location":"CONTRIBUTING/#feature-requests","title":"Feature Requests","text":"<p>If you would like to suggest a new feature for our software, please visit issues and create a <code>Feature request</code>.</p>"},{"location":"CONTRIBUTING/#issue-labels","title":"Issue Labels","text":"<p>We use these labels to help us track and manage <code>Bug reports</code> and <code>Feature requests</code>.</p> Label Description <code>bug</code> Something isn't working. <code>enhancement</code> New feature or request. <code>help wanted</code> Extra attention is needed. <code>good first issue</code> Good for newcomers. <code>documentation</code> Improvements or additions to documentation."},{"location":"CONTRIBUTING/#general-information","title":"General Information","text":"<p>For specific proposals, please provide them as pull requests or issues via our GitHub site.</p> <p>The DEVELOPMENT.md file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.</p>"},{"location":"CONTRIBUTING/#pull-requests-and-different-branches-recommended","title":"Pull requests and different branches recommended","text":"<p>Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.</p> <p>We recommend creating different branches for different (logical) changes, and creating a pull request into the <code>main</code> branch when you're done. See the GitHub documentation on creating branches and using pull requests.</p>"},{"location":"CONTRIBUTING/#how-we-handle-proposals","title":"How we handle proposals","text":"<p>We use GitHub to track proposed changes via its issue tracker and pull requests. Specific changes are proposed using those mechanisms. Issues are assigned to an individual, who works and then marks it complete. If there are questions or objections, the conversation of that issue or pull request is used to resolve it.</p>"},{"location":"CONTRIBUTING/#we-are-proactive","title":"We are proactive","text":"<p>In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.</p> <p>Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our security information for more information.</p>"},{"location":"CONTRIBUTING/#vulnerability-reporting-security-issues","title":"Vulnerability reporting (security issues)","text":"<p>Please privately report vulnerabilities you find so we can fix them!</p> <p>See SECURITY.md for information on how to privately report vulnerabilities.</p>"},{"location":"CONTRIBUTING/#acknowledgements","title":"Acknowledgements","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.0.0, available at http://contributor-covenant.org/version/1/0/0/</p>"},{"location":"PAT/","title":"Personal Access Token (PAT)","text":"<p>The most common use case for <code>RepoAuditor</code> would be to audit a GitHub repository. In order to allow <code>RepoAuditor</code> to read the repository, you first need to generate a Personal Access Token or PAT.</p> <p>Please refer to the GitHub documentation on Personal Access Tokens for details about a <code>Fine-grained PAT</code> which we will be using.</p> <p>To generate the Fine-grained PAT, we perform the following steps:</p> <ol> <li>Go to <code>Settings -&gt; Developer settings -&gt; Personal Access Token -&gt; Fine-grained tokens</code>.</li> <li>Click on <code>Generate new token</code>.</li> <li>Give the token a name and a description.</li> <li>Set an appropriate expiration date.</li> <li>Under <code>Repository Access</code>, select <code>All repositories</code>.</li> <li>For permissions, we need to go to <code>Repository permissions</code>.</li> <li>Enable the following permissions:<ul> <li>Read-Write access to <code>Contents</code>.</li> <li>Read access to <code>Administration</code> and <code>Secret scanning alerts</code>.</li> </ul> </li> <li>Click on <code>Generate token</code>.</li> <li>Copy the generated string. This is your PAT.</li> <li>Save the PAT to a convenient location on your machine (such as your home directory <code>~/</code>) in the file <code>PAT.txt</code>.</li> </ol> <p>The path to the <code>PAT.txt</code> will be passed into <code>RepoAuditor</code>. E.g.</p> <pre><code>uvx RepoAuditor --GitHub-pat ~/PAT.txt\n</code></pre>"},{"location":"config_file/","title":"Configuration File","text":"<p><code>RepoAuditor</code> accepts both a set of flags as well as a configuration YAML file.</p> <p>The configuration (or config) file can make usage easier by recording preferences as well as facilitating sharing of enforced requirements within an organization. We have provided a sample configuration file called default_config.yaml, which can be used as:</p> <pre><code>uvx run RepoAuditor --config default_config.yaml\n</code></pre>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#fork-setup","title":"Fork setup","text":"Step Command Line Additional Information 1. Fork the repository -- Fork Link 2. Create a PAT for your forked repository -- See PAT setup instructions 3. Update your forked repository settings to match RepoAuditor's defaults -- --"},{"location":"development/#local-development","title":"Local Development","text":""},{"location":"development/#enlistment","title":"Enlistment","text":"Step Command Line Additional Information 1. Clone the repository locally. <code>git clone https://github.com/gt-sse-center/RepoAuditor</code> git-clone docs 2. Install uv. <code>curl -LsSf https://astral.sh/uv/install.sh \\| sh</code> on macOS and Linux or <code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 \\| iex\"</code> on Windows https://docs.astral.sh 3. Install dependencies. <code>uv sync</code> Astral uv sync docs 4. Install pre-commit hooks <code>uv run pre-commit install</code> Install pre-commit 5. If you wish to test against an enterprise server, add a remote named <code>enterprise</code> with the corresponding URL E.g. <code>git remote add enterprise git@github.gatech.edu:sse-center/RepoAuditor.git</code>"},{"location":"development/#setup","title":"Setup","text":""},{"location":"development/#basic-setup","title":"Basic Setup","text":"<p>Please follow these steps to allow for local testing.</p> <ul> <li>Fork the <code>RepoAuditor</code> repository. We will test against the fork since your generated PAT is applicable only for the fork.</li> <li>Create a PAT file as detailed in the README.</li> <li>Set your forked repository as the <code>origin</code> remote (this should already be the case but it's good to verify).</li> </ul> <pre><code>git remote add origin git@github.com:&lt;github-username&gt;/RepoAuditor.git\n</code></pre> <ul> <li>Update the URL in <code>default_config.yaml</code> to point to your fork.</li> <li>You should now be able to run the following and see valid output. There will be errors, which we will tackle next.</li> </ul> <pre><code>uv run RepoAuditor --config default_config.yaml --GitHub-pat PAT.txt\n</code></pre>"},{"location":"development/#local-testing","title":"Local Testing","text":"<p>You can now run local tests from the project root directory with</p> <pre><code>uv run pytest -k 'not EndToEndTest'\n</code></pre>"},{"location":"development/#end-to-end-testing","title":"End-To-End Testing","text":"<p>To include tests against your <code>RepoAuditor</code> fork for comprehensive end-to-end testing, you can run:</p> <pre><code>uv run pytest\n</code></pre> <p>In order to run end-to-end tests, which make calls to the GitHub API, you need to configure your forked repository, else you will see a large number of test failures.</p> <p>Please follow the steps below to complete the configuration.</p> <ul> <li>On the <code>General</code> settings page</li> <li>Under <code>Features</code><ul> <li>Check <code>Wikis</code>.</li> <li>Check <code>Issues</code>.</li> <li>Check <code>Projects</code>.</li> </ul> </li> <li> <p>Under <code>Pull Requests</code></p> <ul> <li>With <code>Allow merge commits</code>, set the <code>Default commit message</code> to <code>Pull request title</code>.</li> <li>Uncheck <code>Allow squash merging</code>.</li> <li>Uncheck <code>Allow rebase merging</code>.</li> <li>Check <code>Allow auto-merge</code>.</li> <li>Check <code>Automatically delete head branches</code>.</li> </ul> </li> <li> <p>On the <code>Branches</code> settings page</p> </li> <li>Click <code>Add classic branch protection rule</code>.</li> <li>Under <code>Branch name pattern</code>, type in <code>main</code>.</li> <li>Check <code>Require a pull request before merging</code>.</li> <li>Check <code>Require a pull request before merging -&gt; Require approvals</code>.</li> <li>Check <code>Require a pull request before merging -&gt; Dismiss stale pull request approvals when new commits are pushed</code>.</li> <li>Check <code>Require a pull request before merging -&gt; Require approval of the most recent reviewable push</code>.</li> <li>Under <code>Protect matching branches</code><ul> <li>Check <code>Require status checks to pass before merging</code>.</li> <li>Check <code>Require status checks to pass before merging -&gt; Require branches to be up to date before merging</code>.</li> <li>Add the <code>CI+CD Workflow / Validate (ubuntu-latest, 3.13)</code> or an equivalent status check.</li> </ul> </li> <li>Check <code>Require conversation resolution before merging</code>.</li> <li>Check <code>Require signed commits</code>.</li> <li> <p>Check <code>Do not allow bypassing the above settings</code>.</p> </li> <li> <p>On the <code>Advanced Security</code> settings page</p> </li> <li> <p>Enable <code>Dependabot security updates</code>.</p> </li> <li> <p>Go to the <code>Actions</code> tab</p> </li> <li>Enable Workflows by clicking on <code>I understand my workflows, go ahead and enable them</code>.</li> <li>Run the <code>CI+CD</code> workflow. You will be asked to enable it, please do so.</li> <li> <p>In the <code>Run workflow</code> dropdown to the right, click the <code>Run workflow</code> button. This should cause the action to run, don't worry if it fails, it is only needed for a check below.</p> </li> <li> <p>On the <code>Rules -&gt; Rulesets</code> settings page, create a new branch ruleset called <code>main</code>:</p> </li> <li>Under <code>Target branches</code>, click <code>Add target -&gt; Include by pattern</code> and type in <code>main</code>. Finalize by clicking <code>Add Inclusion pattern</code>.</li> <li>Enable <code>Restrict deletions</code></li> <li>Enable <code>Require signed commits</code></li> <li>Enable <code>Require a pull request before merging</code> with 1 required approval.<ul> <li>Enable <code>Dismiss stale pull request approvals when new commits are pushed</code>.</li> <li>Enable <code>Require approval of the most recent reviewable push</code>.</li> <li>Enable <code>Require conversation resolution before merging</code>.</li> </ul> </li> <li>Enable <code>Require status checks to pass</code>.<ul> <li>Enable <code>Require branches to be up to date before merging</code>.</li> <li>Set the <code>CI+CD Workflow / Validate (ubuntu-latest, 3.12)</code> or an equivalent check.</li> </ul> </li> <li>Disable <code>Block force pushes</code>.</li> <li>Be sure to hit <code>Save changes</code> at the end.</li> </ul>"},{"location":"development/#development-activities","title":"Development Activities","text":"Activity Command Line Description Used During Local Development Invoked by Continuous Integration Code Formatting <code>uv run ruff format</code> or<code>uv run ruff format --check</code> Format source code using ruff based on settings in <code>pyproject.toml</code>.  (via pre-commit) Sort Imports <code>uv run ruff check --fix --select I</code> Sort imports in source files. Static Code Analysis <code>uv run ruff check</code> Validate source code using ruff based on settings in <code>pyproject.toml</code>.  (via pre-commit) Run pre-commit scripts <code>uv run pre-commit run</code> Run pre-commit scripts based on settings in <code>.pre-commit-config.yaml</code>. Automated Testing <code>uv run pytest</code> or<code>uv run pytest --no-cov</code> Run automated tests using pytest and extract code coverage using coverage based on settings in <code>pyproject.toml</code>. Semantic Version Generation <code>uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./src/RepoAuditor/__init__.py ./src</code> Generate a new Semantic Version based on git commits using AutoGitSemVer. Version information is stored in <code>./src/RepoAuditor/__init__.py</code>. Python Package Creation <code>uv build</code> Create a python package using uv based on settings in <code>pyproject.toml</code>. Generated packages will be written to <code>./dist</code>. Sign Artifacts <code>uv run --with py-minisign python -c \"import minisign; minisign.SecretKey.from_file(&lt;temp_filename&gt;).sign_file(&lt;filename&gt;, trusted_comment='&lt;package_name&gt; v&lt;package_version&gt;', drop_signature=True)</code> Signs artifacts using py-minisign. Note that the private key is stored as a GitHub secret. Python Package Publishing <code>uv publish</code> Publish a python package to PyPi using uv based on settings in <code>pyproject.toml</code>."},{"location":"development/#contributing-changes","title":"Contributing Changes","text":"<p>Pull requests are preferred, since they are specific. For more about how to create a pull request, see this guide.</p> <p>We recommend creating different branches for different (logical) changes, and creating a pull request into the <code>main</code> branch when you're done. For more information on creating branches, please see this GitHub guide.</p>"},{"location":"development/#verifying-signed-artifacts","title":"Verifying Signed Artifacts","text":"<p>Artifacts are signed and validated using py-minisign and the public key in the file <code>./minisign_key.pub</code>.</p> <p>To verify that an artifact is valid, visit the latest release and download the <code>.minisign</code> signature file that corresponds to the artifact, then run the following command, replacing <code>&lt;filename&gt;</code> with the name of the artifact to be verified:</p> <pre><code>uv run --with py-minisign python -c \"import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('&lt;filename&gt;')\"\n</code></pre>"},{"location":"development/#generating-documentation","title":"Generating Documentation","text":"<p>We use MkDocs to generate the documentation website. To generate the docs, please run</p> <pre><code>uv run mkdocs --serve\n</code></pre> <p>and go to the specified URL.</p> <p>To publish the website using GitHub pages, you can simply run</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-use","title":"Basic Use","text":"<p>With a generated PAT file, you can now run <code>RepoAuditor</code> on your GitHub repository.</p> <pre><code>uvx repoauditor --include GitHub \\\n  --GitHub-url &lt;url-to-repo&gt; \\\n  --GitHub-pat ~/PAT.txt\n</code></pre> <p>If your repository is on an enterprise server, you can similarly generate a PAT (and save it <code>enterprise_PAT.txt</code>) and point <code>RepoAuditor</code> to the corresponding repo:</p> <pre><code>uvx repoauditor --include GitHub \\\n  --GitHub-url &lt;url-to-enterprise-repo&gt; \\\n  --GitHub-pat ~/enterprise_PAT.txt\n</code></pre> <p>As a general example, we will use the python-helloworld repository.</p> <p>NOTE You need to fork the repository since your default PAT only has access to repos under your account.</p> <p>To run <code>RepoAuditor</code>, we can enter the following in the command-line:</p> <pre><code>uvx repoauditor --include GitHub \\\n  --GitHub-url https://github.com/&lt;username&gt;/python-helloworld \\\n  --GitHub-pat ~/PAT.txt\n</code></pre> <p><code>RepoAuditor</code> will generate a series of messages describing all the issues in the repository, along with the rationale behind them and the steps for resolution.</p> <p></p>"},{"location":"usage/#custom-settings","title":"Custom Settings","text":"<p><code>RepoAuditor</code> tries to provide default settings and checks which are considered best practices. However, your team or organization may have different ways of doing things. You can override the default settings by specifying the appropriate flag.</p> <p>We have 3 types of flags:</p> <ol> <li>Boolean flags for those settings which are checked to be on by default and you wish to check are off, with the form <code>Module-no-Requirement</code> (e.g. <code>--GitHub-no-MergeCommit</code>).</li> <li>Conversely, boolean flags for those settings which are checked to be off by default, and you wish to check are on, denoted by the form <code>Module-Requirement</code> (e.g. <code>--GitHub-AllowDeletions</code>).</li> <li>Values flags take a string value to determine what value to enforce, and have the form <code>Module-Requirement-value</code> (e.g. <code>--GitHub-License-value \"MIT License\"</code>).</li> </ol> <p>Please run <code>uvx repoauditor --help</code> to get the list of all flags available.</p> <p></p>"},{"location":"usage/#examples","title":"Examples","text":"<p>In this section, we will look at various exampls of using <code>RepoAuditor</code>. For the sake of brevity, we will omit the <code>--include</code> and <code>--GitHub-url</code> flags, leaving the inclusion to the user.</p> <p><code>RepoAuditor</code> is designed to have sensible defaults which represent industry best practices. For example, <code>RepoAuditor</code> by default checks that the setting <code>Allow rebase merging</code> is off. However, if you wish to check that this setting is turned on, you can run:</p> <pre><code>uvx repoauditor --GitHub-RebaseMergeCommit\n</code></pre> <p>Similarly, <code>RepoAuditor</code> checks if <code>Issues</code> are enabled. You can set <code>RepoAuditor</code> to check if <code>Issues</code> is disabled by specifying</p> <pre><code>uvx repoauditor --GitHub-no-SupportIssues\n</code></pre> <p>Finally, <code>RepoAuditor</code> by default enforces that the <code>MIT License</code> exists for the repository. If your organization requires another license (such as <code>GPL</code>), you can enforce that by specifying the license keyword such as:</p> <pre><code>uvx repoauditor --GitHub-License-value \"GNU General Public License v2.0\"\n</code></pre> <p>The types of licenses supported by GitHub can be found here. Be sure to specify the full license name, e.g. <code>GNU General Public License v2.0</code>.</p> <p></p>"},{"location":"usage/#excluding-requirements","title":"Excluding Requirements","text":"<p>There is often the case you might wish to exclude a module or a specific requirement. <code>RepoAuditor</code> has built-in support for this as well, by using the <code>--excludes</code> flag.</p> <p>To exclude a requirement, you can run specify the requirement as <code>Module-Requirement</code></p> <pre><code>uvx repoauditor --include GitHub --excludes GitHub-RequireSignedCommitsRule\n</code></pre> <p>The above command includes all of the requirements in the <code>GitHub</code> module except for the <code>RequireSignedCommitsRule</code> requirement.</p> <p>You can similarly exclude a whole module:</p> <pre><code>uvx repoauditor --include GitHub --excludes CommunityStandards\n</code></pre> <p>NOTE: This way of excluding a module is redundant since any module not added via <code>--include</code> is automatically excluded.</p>"}]}